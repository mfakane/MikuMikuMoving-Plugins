<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".Generated.cs" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    var templateDir = Path.GetDirectoryName(Host.TemplateFile);
    if (templateDir == null) throw new InvalidOperationException();

    var exportRegex = new Regex(@"^\s*_EXPORT\s+(?<type>\w+\*?)\s+(?<name>\w+)\((?:(?<args>\w+)(?:,\s*)?)*\);",
        RegexOptions.Compiled | RegexOptions.Multiline);
    var exportedFunctions = File.ReadLines(Path.Combine(templateDir, @"..\..\GetMmdTransformationProxy\MMDExport.h"))
        .Select(x => exportRegex.Match(x))
        .Where(x => x.Success)
        .Select(x => new
        {
            ReturnType = x.Groups["type"].Value,
            Name = x.Groups["name"].Value,
            DelegateName = x.Groups["name"].Value + "Proc",
            Arguments = x.Groups["args"].Captures.Cast<Capture>().Select(c => c.Value).ToArray(),
        })
        .Where(x => x.ReturnType is "char*" or "int" or "float" or "bool" or "D3DMATRIX")
        .ToArray();
#>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using DxMath;

namespace Linearstar.MikuMikuMoving.GetMmdTransformationPlugin.Mmd;

partial class MmdImport
{
<#
    foreach (var def in exportedFunctions)
    {
        var returnType = def.ReturnType switch
        {
            "char*" => "string",
            "D3DMATRIX" => "Matrix",
            { } x => x,
        };
#>
	public <#= returnType #> <#= def.Name #>(<#= string.Join(", ", def.Arguments.Select((x, i) => $"{x} arg{i}")) #>)
	{
		return InvokeRemote<<#= returnType #>>("<#= def.Name #>", new int[] { <#=
        string.Join(", ", def.Arguments.Select((_, i) => $"arg{i}")) #> });
	}

<#
    }
#>
}
